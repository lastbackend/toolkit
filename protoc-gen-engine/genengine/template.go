/*
Copyright [2014] - [2021] The Last.Backend authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package genengine

import (
	"github.com/lastbackend/engine/protoc-gen-engine/descriptor"

	"bytes"
	"strings"
	"text/template"
)

type tplOptions struct {
	*descriptor.File
	Imports          []descriptor.GoPackage
	Plugins          map[string]map[string]*Plugin
	Routes           []*Route
	ProtocVersion    string
	GeneratorVersion string
}

type Plugin struct {
	Prefix string
	Plugin string
	Pkg    string
}

type Route struct {
	Name string
	Path   string
	Method string
}

type contentParams struct {
	Plugins  map[string]map[string]*Plugin
	Services []*descriptor.Service
}

func applyTemplate(to tplOptions) (string, error) {
	w := bytes.NewBuffer(nil)

	if err := headerTemplate.Execute(w, to); err != nil {
		return "", err
	}

	var targetServices = make([]*descriptor.Service, 0)
	for _, msg := range to.Messages {
		msgName := camel(*msg.Name)
		msg.Name = &msgName
	}

	for _, svc := range to.Services {
		svcName := camel(*svc.Name)
		svc.Name = &svcName
		targetServices = append(targetServices, svc)
	}

	tp := contentParams{
		Plugins:  to.Plugins,
		Services: targetServices,
	}

	if err := contentTemplate.Execute(w, tp); err != nil {
		return "", err
	}

	return w.String(), nil
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-engine. DO NOT EDIT.
// source: {{ .GetName }}
// versions:
// - protoc            {{ .ProtocVersion }}
// - protoc-gen-engine {{ .GeneratorVersion }}

package {{ .GoPkg.Name }}

import (
	{{range $i := .Imports}}{{if $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}

	{{range $i := .Imports}}{{if not $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}
)

// Suppress "imported and not used" errors
var _ context.Context
var _ logger.Logger
var _ plugin.Plugin
var _ server.Server
`))

	funcMap = template.FuncMap{
		"ToUpper":      strings.ToUpper,
		"ToLower":      strings.ToLower,
		"ToCapitalize": strings.Title,
	}

	_ = template.Must(contentTemplate.New("plugins-content").Parse(`
var props = map[string]map[string]engine.ServiceProps{
{{range $type, $plugins := .Plugins}}
	"{{$type}}": {
		{{range $name, $plugin := $plugins}}
			"{{$name | ToCapitalize}}": engine.ServiceProps{
				Func: {{$plugin.Plugin}}.Register,
				Options: plugin.Option{
					Prefix: "{{$plugin.Prefix | ToLower}}",
				},
			},
		{{end}}
	},
{{end}}
}

{{if .Plugins}}
type Core struct {
{{range $type, $plugins := .Plugins}}
	{{ $length := len $plugins }} {{ if eq $length 1 }}
		{{range $name, $plugin := $plugins}}
			{{$type | ToCapitalize}} {{$plugin.Pkg}}
		{{end}}
  {{else}}
		{{$type}} *{{$type}}
	{{end}}
{{end}}
}

{{range $type, $plugins := .Plugins}}
	{{ $length := len $plugins }} {{ if ne $length 1 }}
	type {{$type}} struct {
		{{range $name, $plugin := $plugins}}
			{{$name | ToCapitalize}} {{$plugin.Pkg}}
		{{end}}
	}
	{{end}}
{{end}}
{{end}}
`))

	_ = template.Must(contentTemplate.New("services-content").Parse(`
type Service interface {
	Logger() logger.Logger
	Meta() engine.Meta
	Run(i interface{}) error
}

func NewService(name string) Service {
	return &service{engine.NewService(name)}
}

type service struct {
	base engine.Service
}

func (s *service) Meta() engine.Meta {
	return s.base.Meta()
}

func (s *service) Run(i interface{}) error {
  if err := s.register(i); err != nil {
		return err
	}
	return s.base.Run()
}

func (s *service) Logger() logger.Logger {
	return s.base.Logger()
}

func (s *service) register(i interface{}) error {
	if err := s.base.Register(i, props); err != nil {
		return err
	}

{{range $svc := .Services}}
	// Install grpc server
	type {{$svc.GetName}}GrpcHandler struct {
		{{$svc.GetName}}Server
	}

  h := &{{$svc.GetName | ToLower}}GrpcHandler{i.({{$svc.GetName}}Handler)}
  g := server.NewServer("grpc")
  if err := g.Register(&{{$svc.GetName}}_ServiceDesc, &{{$svc.GetName}}GrpcHandler{h}); err != nil {
  	return err
  }
  
  if err := s.base.Transport(g); err != nil {
  	return err
  }
{{end}}
	
	return nil
}
`))

	_ = template.Must(contentTemplate.New("server-content").Parse(`
{{range $svc := .Services}}
	// Server API for Api service
	type {{$svc.GetName}}Handler interface {
		{{range $m := $svc.Methods}}
    {{if and (not $m.GetServerStreaming) (not $m.GetClientStreaming)}}
			{{$m.GetName}}(ctx context.Context, in *{{$m.RequestType.GoName}}) (*{{$m.ResponseType.GoName}}, error)
    {{else}}{{if not $m.GetClientStreaming}}
			{{$m.GetName}}(req *{{$m.RequestType.GoName}}, stream {{$svc.GetName}}_{{$m.GetName}}Server) error
    {{else}}
			{{$m.GetName}}(stream {{$svc.GetName}}_{{$m.GetName}}Server) error
    {{end}}{{end}}
	{{end}}
	}
{{end}}

{{range $svc := .Services}}
	type {{$svc.GetName | ToLower}}GrpcHandler struct {
		{{$svc.GetName}}Handler
	}

	{{range $m := $svc.Methods}}
    {{if and (not $m.GetServerStreaming) (not $m.GetClientStreaming)}}
  		func (h *{{$svc.GetName | ToLower}}GrpcHandler) {{$m.GetName}}(ctx context.Context, in *{{$m.RequestType.GoName}}) (*{{$m.ResponseType.GoName}}, error) {
				return h.{{$svc.GetName}}Handler.{{$m.GetName}}(ctx, in)				
			}
    {{else}}{{if not $m.GetClientStreaming}}
			func (h *{{$svc.GetName | ToLower}}GrpcHandler) {{$m.GetName}}(req *{{$m.RequestType.GoName}}, stream {{$svc.GetName}}_{{$m.GetName}}Server) error {
				return h.{{$svc.GetName}}Handler.{{$m.GetName}}(req, stream)
			}
    {{else}}
			func (h *{{$svc.GetName | ToLower}}GrpcHandler) {{$m.GetName}}(stream {{$svc.GetName}}_{{$m.GetName}}Server) error {
				return h.{{$svc.GetName}}Handler.{{$m.GetName}}(stream)
			}
    {{end}}{{end}}
	{{end}}
	func ({{$svc.GetName | ToLower}}GrpcHandler) mustEmbedUnimplemented{{$svc.GetName}}Server() {}
{{end}}
`))

	_ = template.Must(contentTemplate.New("client-content").Parse(`
{{range $svc := .Services}}
	// Client methods for {{$svc.GetName}} service
	const (
		{{range $m := $svc.Methods}}
			{{$svc.GetName}}_{{$m.GetName}}Method = "/{{$svc.GetName | ToLower}}.{{$svc.GetName}}/{{$m.GetName}}"
		{{end}}
	)
{{end}}
`))

	contentTemplate = template.Must(template.New("content").Funcs(funcMap).Parse(`
{{template "plugins-content" .}}
{{template "services-content" .}}
{{template "server-content" .}}
{{template "client-content" .}}
`))
)
