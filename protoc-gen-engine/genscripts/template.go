/*
Copyright [2014] - [2021] The Last.Backend authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package genscripts

import (
	"bytes"
	"text/template"
)

type tplDockerfileOptions struct {
	RewriteIfExists bool
	Package         string
	Expose          []int32
	Commands        []string
}

func applyDockerfileTemplate(to tplDockerfileOptions) (string, error) {
	w := bytes.NewBuffer(nil)

	if err := dockerfileTemplate.Execute(w, to); err != nil {
		return "", err
	}

	return w.String(), nil
}

type tplMakefileOptions struct {
}

func applyMakefileTemplate(to tplMakefileOptions) (string, error) {
	w := bytes.NewBuffer(nil)

	if err := makefileTemplate.Execute(w, to); err != nil {
		return "", err
	}

	return w.String(), nil
}

type tplMockeryTestOptions struct {
	Package         string
}

func applyTestTemplate(to tplMockeryTestOptions) (string, error) {
	w := bytes.NewBuffer(nil)

	if err := mockeryTestTemplate.Execute(w, to); err != nil {
		return "", err
	}

	return w.String(), nil
}

var (
	dockerfileTemplate = template.Must(template.New("dockerfile").Parse(
		`# Script generated by protoc-gen-engine.
# Build manifest
FROM golang:1.17.2-alpine3.14 as build

RUN apk add --no-cache ca-certificates \
  linux-headers \
  gcc \
  musl-dev

RUN set -ex \
	&& apk add --no-cache --virtual .build-deps \
    bash \
    git \
    make \
	\
	&& rm -rf /*.patch

ENV GOPATH /go
ENV GOROOT /usr/local/go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

ADD . $GOPATH/src/{{.Package}}
WORKDIR $GOPATH/src/{{.Package}}

RUN make build && make install
RUN apk del --purge .build-deps

WORKDIR $GOPATH/bin

RUN rm -rf $GOPATH/pkg \
    && rm -rf $GOPATH/src \
    && rm -rf /var/cache/apk/*


# Release manifest
FROM alpine:3.14 as production

RUN apk add --no-cache ca-certificates

COPY --from=build /usr/bin/service /usr/bin/service

{{if .Expose}}EXPOSE {{$equipment := .Expose}}{{ range $index, $element := .Expose}}{{if $index}} {{end}}{{$element}}{{end}}{{end}}

{{if .Commands}}CMD [{{$equipment := .Commands}}{{ range $index, $element := .Commands}}{{if $index}},{{end}}"{{$element}}"{{end}}]{{end}}

`))

	makefileTemplate = template.Must(template.New("makefile").Parse(
		`# Script generated by protoc-gen-engine.
.PHONY : default deps test build install

default: deps test build install

deps:
	@echo "Configuring dependencies for service"
	#Here you need to describe the script for installing dependencies for your service. 

test:
	@echo "Testing service"
	#Here you need to describe the script for testing your service.

build:
	@echo "Building service"
	#Here you need to describe the script for building your service.

install:
	@echo "== Install binaries"
	#Here you need to describe the script for install binaries your service.

`))


	mockeryTestTemplate = template.Must(template.New("stub-content-mockery").Parse(`
{{range $svc := .Services}}
	// Server API for Api service
	type {{$svc.GetName}}Stubs struct {
		{{range $m := $svc.Methods}}
		{{if and (not $m.GetServerStreaming) (not $m.GetClientStreaming)}}
				{{$m.GetName}} []{{$m.GetName}}Stub
		{{else}}{{if not $m.GetClientStreaming}}
				{{$m.GetName}} []{{$m.GetName}}Stub
		{{end}}{{end}}
	{{end}}
	}

	func New{{$svc.GetName}}Stubs() *{{$svc.GetName}}Stubs {
		stubs:= new({{$svc.GetName}}Stubs)
		{{range $m := $svc.Methods}}
			{{if and (not $m.GetServerStreaming) (not $m.GetClientStreaming)}}
		stubs.{{$m.GetName}} = make([]{{$m.GetName}}Stub,0)
			{{else if not $m.GetClientStreaming}}
		stubs.{{$m.GetName}} = make([]{{$m.GetName}}Stub,0)
			{{end}}
		{{end}}
		return stubs
	}

	func With{{$svc.GetName}}Stubs(rpc_mock {{$svc.GetName}}RpcClient, stubs *{{$svc.GetName}}Stubs) {{$svc.GetName}}RpcClient{
		{{range $m := $svc.Methods}}
		for _, st := range stubs.{{$m.GetName}} {
			sbCtx := st.Context
			sbReq := st.Request
			sbRsp := st.Response
			sbErr := st.Error
			rpc_mock.On("{{$m.GetName}}", sbCtx, &sbReq, mock.IsType("[]grpc.CallOption")).Return(
				func(ctx context.Context, req *{{$m.RequestType.GoName}}, opts ...grpc.CallOption) *{{$m.ResponseType.GoName}} {
					return &sbRsp
				},
				func(ctx context.Context, req *{{$m.RequestType.GoName}}, opts ...grpc.CallOption) error {
					return sbErr
				},
			)
		}
		{{end}}

		return rpc_mock
	}


{{end}}

{{range $svc := .Services}}
	{{range $m := $svc.Methods}}
	type {{$m.GetName}}Stub struct {
	{{if and (not $m.GetServerStreaming) (not $m.GetClientStreaming)}}
		Context  context.Context
		Request  {{$m.RequestType.GoName}}
		Response {{$m.ResponseType.GoName}}
		Error 	 error
	{{end}}
	
	}
	{{end}}
	{{end}}
`))

)
