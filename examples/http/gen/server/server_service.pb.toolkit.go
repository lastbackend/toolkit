// Code generated by protoc-gen-toolkit. DO NOT EDIT.
// source: github.com/lastbackend/toolkit/examples/http/apis/server.proto

package serverpb

import (
	"context"
	"encoding/json"
	"io"
	"net/http"

	toolkit "github.com/lastbackend/toolkit"
	client "github.com/lastbackend/toolkit/pkg/client"
	runtime "github.com/lastbackend/toolkit/pkg/runtime"
	controller "github.com/lastbackend/toolkit/pkg/runtime/controller"
	tk_http "github.com/lastbackend/toolkit/pkg/server/http"
	errors "github.com/lastbackend/toolkit/pkg/server/http/errors"
	tk_ws "github.com/lastbackend/toolkit/pkg/server/http/websockets"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the toolkit package it is being compiled against and
// suppress "imported and not used" errors
var (
	_ context.Context
	_ emptypb.Empty
	_ http.Handler
	_ errors.Err
	_ io.Reader
	_ json.Marshaler
	_ tk_ws.Client
	_ tk_http.Handler
	_ client.GRPCClient
)

// Definitions

// Service Http define
type serviceHttp struct {
	runtime runtime.Runtime
}

func NewHttpService(name string, opts ...runtime.Option) (_ toolkit.Service, err error) {
	app := new(serviceHttp)

	app.runtime, err = controller.NewRuntime(context.Background(), name, opts...)
	if err != nil {
		return nil, err
	}

	// loop over plugins and initialize plugin instance

	// loop over plugins and register plugin in toolkit

	// create new Http HTTP server
	app.runtime.Server().HTTPNew(name, nil)

	app.runtime.Server().HTTP().AddHandler(http.MethodGet, "/hello", app.handlerHTTPHttpHelloWorld)

	return app.runtime.Service(), nil
}

// Define services for Http HTTP server

type HttpHTTPService interface {
	HelloWorld(ctx context.Context, req *HelloRequest) (*HelloResponse, error)
}

// Define HTTP handlers for Router HTTP server

func (s *serviceHttp) handlerHTTPHttpHelloWorld(w http.ResponseWriter, r *http.Request) {
	ctx, cancel := context.WithCancel(r.Context())
	defer cancel()

	var protoRequest HelloRequest
	var protoResponse *HelloResponse

	_, om := tk_http.GetMarshaler(s.runtime.Server().HTTP(), r)

	if err := r.ParseForm(); err != nil {
		errors.HTTP.InternalServerError(w)
		return
	}

	if err := tk_http.ParseRequestQueryParametersToProto(&protoRequest, r.Form); err != nil {
		errors.HTTP.InternalServerError(w)
		return
	}

	headers, err := tk_http.PrepareHeaderFromRequest(r)
	if err != nil {
		errors.HTTP.InternalServerError(w)
		return
	}

	ctx = tk_http.NewIncomingContext(ctx, headers)

	protoResponse, err = s.runtime.Server().HTTP().GetService().(HttpHTTPService).HelloWorld(ctx, &protoRequest)
	if err != nil {
		errors.GrpcErrorHandlerFunc(w, err)
		return
	}

	buf, err := om.Marshal(protoResponse)
	if err != nil {
		errors.HTTP.InternalServerError(w)
		return
	}

	w.Header().Set("Content-Type", om.ContentType())
	if proceed, err := tk_http.HandleGRPCResponse(w, r, headers); err != nil || !proceed {
		return
	}

	if _, err = w.Write(buf); err != nil {
		return
	}
}
