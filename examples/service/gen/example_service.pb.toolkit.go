// Code generated by protoc-gen-toolkit. DO NOT EDIT.
// source: github.com/lastbackend/toolkit/examples/service/apis/example.proto

package servicepb

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/lastbackend/toolkit/pkg/server"

	"io"
	"net/http"

	"github.com/lastbackend/toolkit/pkg/runtime"
	"github.com/lastbackend/toolkit/pkg/runtime/controller"
	"github.com/lastbackend/toolkit/pkg/runtime/logger"

	tk_http "github.com/lastbackend/toolkit/pkg/server/http"

	toolkit "github.com/lastbackend/toolkit"
	"github.com/lastbackend/toolkit/examples/service/gen/ptypes"

	errors "github.com/lastbackend/toolkit/pkg/server/http/errors"
	ws "github.com/lastbackend/toolkit/pkg/server/http/websockets"
	"github.com/lastbackend/toolkit/plugin/postgres_gorm"
	"github.com/lastbackend/toolkit/plugin/redis"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Suppress "imported and not used" errors
var (
	_ context.Context
	_ logger.Logger
	_ emptypb.Empty
	_ http.Handler
	_ errors.Err
	_ io.Reader
	_ json.Marshaler
	_ ws.Client
)

// Definitions
type Services interface {
	Example() ExampleClient
}

type services struct {
	example ExampleClient
}

func (s *services) Example() ExampleClient {
	return s.example
}

func servicesRegister(runtime runtime.Runtime) (Services, error) {
	var (
		err  error
		svcs = new(services)
	)

	serviceExampleConntionPool, err := runtime.Client().GRPC().Conn("example")
	if err != nil {
		return nil, err
	}

	svcs.example = NewExampleClient(serviceExampleConntionPool)
	return svcs, nil
}

// Plugins define
type PgsqlPlugin interface {
	postgres_gorm.Plugin
}

type RedisPlugin interface {
	redis.Plugin
}

// GRPC servers define
type ExampleRpcServer interface {
	HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error)
	mustEmbedUnimplementedExampleServer()
}

type exampleGrpcRpcServer struct {
	ExampleRpcServer
}

func (h *exampleGrpcRpcServer) HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error) {
	return h.ExampleRpcServer.HelloWorld(ctx, req)
}

func (exampleGrpcRpcServer) mustEmbedUnimplementedExampleServer() {}

func registerExampleGRPCServer(runtime runtime.Runtime, srv ExampleRpcServer) error {
	runtime.Server().GRPC().RegisterService(&exampleGrpcRpcServer{srv})
	return nil
}

// HTTP server middleware
func exampleHTTPServerMiddleware(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("Call: ExampleMiddleware")

		// Set example data to request context
		ctx := context.WithValue(r.Context(), "test-data", "example context data")

		h.ServeHTTP(w, r.WithContext(ctx))
	})
}

// HTTP server custom handler
func exampleHTTPServerSubscribeHandler(w http.ResponseWriter, r *http.Request) {
	return
}

const (
	AuthMiddlerware    server.KindMiddleware = "authMiddleware"
	requestMiddlerware server.KindMiddleware = "requestMiddlerware"
)

func NewService(name string, opts ...runtime.Option) (toolkit.Service, error) {

	runtime, err := controller.NewRuntime(context.Background(), name, opts...)
	if err != nil {
		return nil, err
	}

	// loop over plugins and initialize plugin instance
	plugin_pgsql := postgres_gorm.NewPlugin(runtime, &postgres_gorm.Options{Name: "pgsql"})
	plugin_redis := redis.NewPlugin(runtime, &redis.Options{Name: "redis"})

	// loop over plugins and register plugin in toolkit
	runtime.Plugin().Provide(func() PgsqlPlugin { return plugin_pgsql })
	runtime.Plugin().Provide(func() RedisPlugin { return plugin_redis })

	// set descriptor to Example grpc server
	runtime.Server().GRPCNew(name, nil)
	runtime.Server().GRPC().SetDescriptor(Example_ServiceDesc)
	runtime.Server().GRPC().SetConstructor(registerExampleGRPCServer)

	// create new Example http server
	runtime.Server().HTTPNew(name, nil)

	runtime.Server().HTTP().UseMiddleware(AuthMiddlerware)

	runtime.Server().HTTP().SetMiddleware(AuthMiddlerware, exampleHTTPServerMiddleware)
	runtime.Server().HTTP().SetMiddleware(requestMiddlerware, exampleHTTPServerMiddleware)

	runtime.Server().HTTP().AddHandler(http.MethodPost, "/hello", exampleHTTPServerSubscribeHandler, tk_http.WithMiddleware(requestMiddlerware))

	runtime.Provide(servicesRegister)

	return runtime.Service(), nil
}
