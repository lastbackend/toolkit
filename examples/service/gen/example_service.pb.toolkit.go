// Code generated by protoc-gen-toolkit. DO NOT EDIT.
// source: github.com/lastbackend/toolkit/examples/service/apis/example.proto

package servicepb

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/lastbackend/toolkit/pkg/runtime"

	tk_http "github.com/lastbackend/toolkit/pkg/server/http"
	"io"
	"net/http"

	toolkit "github.com/lastbackend/toolkit"
	"github.com/lastbackend/toolkit/examples/service/gen/ptypes"
	grpc "github.com/lastbackend/toolkit/pkg/client/grpc"
	logger "github.com/lastbackend/toolkit/pkg/logger"
	server "github.com/lastbackend/toolkit/pkg/server"

	errors "github.com/lastbackend/toolkit/pkg/server/http/errors"
	ws "github.com/lastbackend/toolkit/pkg/server/http/websockets"
	"github.com/lastbackend/toolkit/plugin/postgres_gorm"
	"github.com/lastbackend/toolkit/plugin/redis"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Suppress "imported and not used" errors
var _ context.Context
var _ logger.Logger
var _ emptypb.Empty
var _ grpc.Client
var _ http.Handler
var _ errors.Err
var _ io.Reader
var _ json.Marshaler
var _ ws.Client
var _ server.Server

// Definitions
type service struct {
	toolkit toolkit.Runtime
}

// Plugins define
type PgsqlPlugin interface {
	postgres_gorm.Plugin
}

type RedisPlugin interface {
	redis.Plugin
}

// GRPC servers define
type ExampleRpcServer interface {
	HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error)
	mustEmbedUnimplementedExampleServer()
}

type exampleGrpcRpcServer struct {
	ExampleRpcServer
}

func (h *exampleGrpcRpcServer) HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error) {
	return h.ExampleRpcServer.HelloWorld(ctx, req)
}

func (exampleGrpcRpcServer) mustEmbedUnimplementedExampleServer() {}

func registerExampleGRPCServer(runtime toolkit.Runtime, srv ExampleRpcServer) error {
	runtime.Manager().Server().GRPC().RegisterService(&exampleGrpcRpcServer{srv})
	return nil
}

// HTTP server middleware
func exampleHTTPServerMiddleware(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("Call: ExampleMiddleware")

		// Set example data to request context
		ctx := context.WithValue(r.Context(), "test-data", "example context data")

		h.ServeHTTP(w, r.WithContext(ctx))
	})
}

// HTTP server custom handler
func exampleHTTPServerSubscribeHandler(w http.ResponseWriter, r *http.Request) {
	return
}

func NewService(name string, opts ...toolkit.Option) (toolkit.Service, error) {

	var (
		err error
	)

	app := new(service)

	app.toolkit, err = runtime.NewRuntime(context.Background(), name, opts...)
	if err != nil {
		return nil, err
	}

	// loop over plugins and initialize plugin instance
	plugin_pgsql := postgres_gorm.NewPlugin(app.toolkit, &postgres_gorm.Options{Name: "pgsql"})
	plugin_redis := redis.NewPlugin(app.toolkit, &redis.Options{Name: "redis"})

	// loop over plugins and register plugin in toolkit
	app.toolkit.Manager().Plugin().Provide(func() PgsqlPlugin { return plugin_pgsql })
	app.toolkit.Manager().Plugin().Provide(func() RedisPlugin { return plugin_redis })

	// set descriptor to Example grpc server
	app.toolkit.Manager().Server().GRPCNew(name, nil)

	app.toolkit.Manager().Server().GRPC().SetDescriptor(Example_ServiceDesc)
	app.toolkit.Manager().Server().GRPC().SetConstructor(registerExampleGRPCServer)

	// create new Example http server
	app.toolkit.Manager().Server().HTTPNew(name, nil)

	app.toolkit.Manager().Server().HTTP().AddMiddleware("middleware1", exampleHTTPServerMiddleware)
	app.toolkit.Manager().Server().HTTP().AddHandler(http.MethodPost, "/hello", exampleHTTPServerSubscribeHandler, tk_http.WithMiddleware("middleware1"))

	return app.toolkit, nil
}
