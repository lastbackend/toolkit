// Code generated by protoc-gen-toolkit. DO NOT EDIT.
// source: github.com/lastbackend/toolkit/examples/service/apis/example.proto

package servicepb

import (
	"context"
	"encoding/json"
	"io"
	"net/http"

	toolkit "github.com/lastbackend/toolkit"
	example "github.com/lastbackend/toolkit/examples/service/gen/client"
	"github.com/lastbackend/toolkit/examples/service/gen/ptypes"
	client "github.com/lastbackend/toolkit/pkg/client"
	runtime "github.com/lastbackend/toolkit/pkg/runtime"
	controller "github.com/lastbackend/toolkit/pkg/runtime/controller"
	tk_http "github.com/lastbackend/toolkit/pkg/server/http"
	errors "github.com/lastbackend/toolkit/pkg/server/http/errors"
	tk_ws "github.com/lastbackend/toolkit/pkg/server/http/websockets"
	"github.com/lastbackend/toolkit/plugin/postgres_gorm"
	"github.com/lastbackend/toolkit/plugin/redis"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the toolkit package it is being compiled against and
// suppress "imported and not used" errors
var (
	_ context.Context
	_ emptypb.Empty
	_ http.Handler
	_ errors.Err
	_ io.Reader
	_ json.Marshaler
	_ tk_ws.Client
	_ tk_http.Handler
	_ client.GRPCClient
)

// Definitions

type PgsqlPlugin interface {
	postgres_gorm.Plugin
}

type RedisPlugin interface {
	redis.Plugin
}

// Client services define
type ExampleServices interface {
	Example() example.ExampleRPCClient
}

type exampleServices struct {
	example example.ExampleRPCClient
}

func (s *exampleServices) Example() example.ExampleRPCClient {
	return s.example
}

func exampleServicesRegister(runtime runtime.Runtime) ExampleServices {
	s := new(exampleServices)
	s.example = example.NewExampleRPCClient("example", runtime.Client().GRPC())
	return s
}

// Service Example define
type serviceExample struct {
	runtime runtime.Runtime
}

func NewExampleService(name string, opts ...runtime.Option) (_ toolkit.Service, err error) {
	app := new(serviceExample)

	app.runtime, err = controller.NewRuntime(context.Background(), name, opts...)
	if err != nil {
		return nil, err
	}

	// loop over plugins and initialize plugin instance
	plugin_pgsql := postgres_gorm.NewPlugin(app.runtime, &postgres_gorm.Options{Name: "pgsql"})
	plugin_redis := redis.NewPlugin(app.runtime, &redis.Options{Name: "redis"})

	// loop over plugins and register plugin in toolkit
	app.runtime.Plugin().Provide(func() PgsqlPlugin { return plugin_pgsql })
	app.runtime.Plugin().Provide(func() RedisPlugin { return plugin_redis })

	// create new Example GRPC server
	app.runtime.Server().GRPCNew(name, nil)

	// set descriptor to Example GRPC server
	app.runtime.Server().GRPC().SetDescriptor(Example_ServiceDesc)
	app.runtime.Server().GRPC().SetConstructor(registerExampleGRPCServer)

	app.runtime.Provide(exampleServicesRegister)

	return app.runtime.Service(), nil
}

// Define GRPC services for Example GRPC server

type ExampleRpcServer interface {
	HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error)
}

type exampleGrpcRpcServer struct {
	ExampleRpcServer
}

func (h *exampleGrpcRpcServer) HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error) {
	return h.ExampleRpcServer.HelloWorld(ctx, req)
}

func (exampleGrpcRpcServer) mustEmbedUnimplementedExampleServer() {}

func registerExampleGRPCServer(runtime runtime.Runtime, srv ExampleRpcServer) error {
	runtime.Server().GRPC().RegisterService(&exampleGrpcRpcServer{srv})
	return nil
}

// Client services define
type SampleServices interface {
	Example() example.ExampleRPCClient
}

type sampleServices struct {
	example example.ExampleRPCClient
}

func (s *sampleServices) Example() example.ExampleRPCClient {
	return s.example
}

func sampleServicesRegister(runtime runtime.Runtime) SampleServices {
	s := new(sampleServices)
	s.example = example.NewExampleRPCClient("example", runtime.Client().GRPC())
	return s
}

// Service Sample define
type serviceSample struct {
	runtime runtime.Runtime
}

func NewSampleService(name string, opts ...runtime.Option) (_ toolkit.Service, err error) {
	app := new(serviceSample)

	app.runtime, err = controller.NewRuntime(context.Background(), name, opts...)
	if err != nil {
		return nil, err
	}

	// loop over plugins and initialize plugin instance
	plugin_pgsql := postgres_gorm.NewPlugin(app.runtime, &postgres_gorm.Options{Name: "pgsql"})
	plugin_redis := redis.NewPlugin(app.runtime, &redis.Options{Name: "redis"})

	// loop over plugins and register plugin in toolkit
	app.runtime.Plugin().Provide(func() PgsqlPlugin { return plugin_pgsql })
	app.runtime.Plugin().Provide(func() RedisPlugin { return plugin_redis })

	app.runtime.Provide(sampleServicesRegister)

	return app.runtime.Service(), nil
}
