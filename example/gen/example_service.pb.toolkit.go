// Code generated by protoc-gen-toolkit. DO NOT EDIT.
// source: github.com/lastbackend/toolkit/example/apis/example.proto

package servicepb

import (
	"context"
	"github.com/lastbackend/toolkit/pkg/client/grpc"
	"github.com/lastbackend/toolkit/pkg/logger"
	server2 "github.com/lastbackend/toolkit/pkg/server"
	"os"
	"os/signal"
	"syscall"

	toolkit "github.com/lastbackend/toolkit"
	"github.com/lastbackend/toolkit/example/gen/ptypes"
	"github.com/lastbackend/toolkit/plugin/storage/postgres_gorm"
	fx "go.uber.org/fx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Suppress "imported and not used" errors
var _ context.Context
var _ logger.Logger
var _ emptypb.Empty
var _ server2.Server

type Service interface {
	Logger() logger.Logger
	Meta() toolkit.Meta
	CLI() toolkit.CLI
	Run(ctx context.Context) error

	SetConfig(cfg interface{})
	SetServer(srv interface{})

	AddPackage(pkg interface{})
	Invoke(fn interface{})
}

type RPC struct {
	Grpc grpc.RPCClient
}

func NewService(name string) Service {
	return &service{
		toolkit: toolkit.NewService(name),
		srv:     make([]interface{}, 0),
		pkg:     make([]interface{}, 0),
		inv:     make([]interface{}, 0),
		rpc:     new(RPC),
	}
}

type service struct {
	toolkit toolkit.Service
	rpc     *RPC
	srv     []interface{}
	pkg     []interface{}
	inv     []interface{}
	cfg     interface{}
}

func (s *service) Meta() toolkit.Meta {
	return s.toolkit.Meta()
}

func (s *service) CLI() toolkit.CLI {
	return s.toolkit.CLI()
}

func (s *service) Logger() logger.Logger {
	return s.toolkit.Logger()
}

func (s *service) SetConfig(cfg interface{}) {
	s.cfg = cfg
}

func (s *service) SetServer(srv interface{}) {
	if srv == nil {
		return
	}
	s.srv = append(s.srv, srv)
}

func (s *service) AddPackage(pkg interface{}) {
	if pkg == nil {
		return
	}
	s.pkg = append(s.pkg, pkg)
}

func (s *service) Invoke(fn interface{}) {
	if fn == nil {
		return
	}
	s.inv = append(s.inv, fn)
}

type PgsqlStorage interface {
	postgres_gorm.Plugin
}

func (s *service) Run(ctx context.Context) error {

	storagePgsql := postgres_gorm.NewPlugin(s.toolkit, &postgres_gorm.Options{Name: "pgsql"})

	provide := make([]interface{}, 0)
	provide = append(provide,
		fx.Annotate(
			func() toolkit.Service {
				return s.toolkit
			},
		),
		func() Service {
			return s
		},
		func() *RPC {
			return s.rpc
		},
		fx.Annotate(
			func() PgsqlStorage {
				return storagePgsql
			},
		),
	)

	provide = append(provide, s.pkg...)
	provide = append(provide, s.srv...)

	opts := make([]fx.Option, 0)

	if s.cfg != nil {
		opts = append(opts, fx.Supply(s.cfg))
	}

	opts = append(opts, fx.Provide(provide...))

	opts = append(opts, fx.Invoke(s.registerClients))
	opts = append(opts, fx.Invoke(s.registerExampleServer))

	opts = append(opts, fx.Invoke(s.runService))
	opts = append(opts, fx.Invoke(s.inv...))

	app := fx.New(
		fx.Options(opts...),
		fx.NopLogger,
	)

	if err := app.Start(ctx); err != nil {
		return err
	}

	signalCh := make(chan os.Signal, 1)
	signal.Notify(signalCh, shutdownSignals...)

	select {
	// wait on kill signal
	case <-signalCh:
	// wait on context cancel
	case <-ctx.Done():
	}

	return app.Stop(ctx)
}

func (s *service) registerClients() error {

	// Register clients

	s.rpc.Grpc = grpc.NewClient(s.toolkit, &grpc.ClientOptions{Name: "client-grpc"})

	if err := s.toolkit.ClientRegister(s.rpc.Grpc); err != nil {
		return err
	}

	return nil
}

func (s *service) registerExampleServer(srv ExampleRpcServer) error {

	// Register servers

	type ExampleGrpcRpcServer struct {
		ExampleServer
	}

	h := &exampleGrpcRpcServer{srv.(ExampleRpcServer)}
	grpcServer := server2.NewServer(s.toolkit, &server2.ServerOptions{Name: "server-example-grpc"})
	if err := grpcServer.Register(&Example_ServiceDesc, &ExampleGrpcRpcServer{h}); err != nil {
		return err
	}

	if err := s.toolkit.ServerRegister(grpcServer); err != nil {
		return err
	}

	return nil
}

func (s *service) runService(lc fx.Lifecycle) error {
	s.toolkit.Start(context.Background())

	lc.Append(fx.Hook{
		OnStop: func(ctx context.Context) error {
			return s.toolkit.Stop(ctx)
		},
	})
	return nil
}

var shutdownSignals = []os.Signal{
	syscall.SIGTERM,
	syscall.SIGINT,
	syscall.SIGQUIT,
	syscall.SIGKILL,
}

// Server API for Api service
type ExampleRpcServer interface {
	HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error)
}

type exampleGrpcRpcServer struct {
	ExampleRpcServer
}

func (h *exampleGrpcRpcServer) HelloWorld(ctx context.Context, req *typespb.HelloWorldRequest) (*typespb.HelloWorldResponse, error) {
	return h.ExampleRpcServer.HelloWorld(ctx, req)
}

func (exampleGrpcRpcServer) mustEmbedUnimplementedExampleServer() {}
